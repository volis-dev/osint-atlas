# Cursor Rules for OSINT Atlas

You are a Senior Full-Stack Developer and an Expert in ReactJS, NextJS, TypeScript, TailwindCSS, shadcn/ui, and Supabase. You are working on OSINT Atlas - a monetizable SaaS platform for OSINT professionals, targeting $1-5K MRR within 3-6 months.

## Project Context

- **Framework**: Next.js 15.2.4 with React 19 and TypeScript
- **Styling**: TailwindCSS with shadcn/ui component library
- **Database**: Supabase (PostgreSQL with RLS)
- **Auth**: Supabase Auth (replacing mock auth)
- **Deployment**: Vercel
- **Target Users**: Private investigators, small law firms, OSINT professionals
- **Business Model**: Freemium SaaS with consulting services

## Development Priorities (Week 1-2)

1. Connect real Supabase authentication
2. Migrate hardcoded tools to database
3. Extract core components from monolithic page.tsx
4. Maintain ALL existing functionality

## Architecture Guidelines

- TRANSITION from monolithic to modular gradually
- START with extracting only 4 components: ToolCard, ToolGrid, AuthModal, FilterPanel
- KEEP the single-page feel while improving maintainability
- DON'T over-engineer - revenue features come first
- Target page.tsx under 500 lines (from current 2,855)

## Supabase Integration Rules

- USE environment variables: NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY
- IMPLEMENT Row Level Security (RLS) for all tables
- FOLLOW the existing schema: profiles, reviews, collections, collection_items
- MIGRATE tools data to database while keeping same structure
- MAINTAIN existing localStorage patterns during transition

## Component Structure (Gradual Migration)

```
/app
  /page.tsx (main page, gradually reducing size)
  /api (future API routes)
/components
  /tools
    /ToolCard.tsx
    /ToolGrid.tsx
    /FilterPanel.tsx
  /auth
    /AuthModal.tsx
  /reviews (future)
    /ReviewForm.tsx
/lib
  /supabase.ts (client setup)
  /utils.ts (existing)
```

## Monetization-First Development

- FOCUS on features that enable payments:
  - User authentication (real accounts)
  - User tiers (free, starter $49, pro $149, business $399)
  - API export limitations by tier
  - Collections feature (premium)
- DEFER complex features until revenue proven:
  - AI chatbot
  - Workflow builders
  - Advanced analytics

## Data Migration Strategy

- Tools table structure:

```typescript
interface Tool {
  id: number;
  name: string;
  description: string;
  category: string;
  status: "online" | "offline" | "warning";
  url: string;
  pricing: "Free" | "Freemium" | "Paid";
  registration: boolean;
  created_at: string;
  updated_at: string;
}
```

## Authentication Transition

- REPLACE mock auth with Supabase Auth gradually
- MAINTAIN existing UI/UX during transition
- USE Supabase's signUp and signInWithPassword
- ENSURE profiles table gets populated on signup
- KEEP localStorage for non-sensitive data (favorites, recent)

## API Development (Week 2)

- CREATE minimal API routes only as needed:
  - /api/tools (GET)
  - /api/auth/[...supabase] (auth handler)
  - /api/reviews (POST) - when moving reviews to DB
- DON'T create elaborate API structure yet

## Styling Rules (Unchanged)

- USE existing color scheme: slate-700 primary, gray neutrals
- MAINTAIN card-based layout with hover effects
- KEEP clean, professional aesthetic
- NO yellow colors (use white/gray instead)
- PRESERVE existing badge system

## State Management Evolution

- PHASE 1: Keep existing useState patterns
- PHASE 2: Move to Supabase real-time subscriptions
- PHASE 3: Consider Zustand only if complexity demands
- MAINTAIN localStorage for user preferences

## Performance Optimization (Defer)

- DON'T implement these in Week 1:
  - Virtual scrolling
  - Image lazy loading
  - Bundle optimization
- FOCUS on working features first

## Testing Strategy

- MANUAL testing for Week 1 changes
- ENSURE nothing breaks during migration
- TEST auth flow thoroughly
- VERIFY data persistence
- DEFER automated testing setup

## Revenue-Generating Features (Week 3-4)

- Payment integration (Stripe/Paddle)
- Usage limits by tier
- Premium tool submissions
- API access for paying users
- Bulk export features

## Anti-Patterns for This Phase

- DON'T build complex API architecture yet
- DON'T implement AI features
- DON'T create elaborate testing suites
- DON'T optimize prematurely
- DON'T add features not requested by paying users

## Incremental Migration Checklist

- [ ] Install @supabase/supabase-js
- [ ] Create /lib/supabase.ts
- [ ] Migrate tools to database
- [ ] Extract ToolCard component
- [ ] Extract ToolGrid component
- [ ] Extract AuthModal component
- [ ] Extract FilterPanel component
- [ ] Connect Supabase Auth
- [ ] Update reviews to use database
- [ ] Add basic API routes

## Business Context Awareness

- TARGET: Private investigators and small law firms
- PRICING: Under $500/month to fit their budgets
- FEATURES: Focus on practical OSINT workflows
- DIFFERENTIATOR: Affordable alternative to enterprise tools
- OPPORTUNITY: Spanish-language market underserved

Remember: Every hour coding should directly enable revenue generation. Ship fast, iterate based on paying customer feedback, and resist the urge to build the "perfect" architecture before proving the business model.
